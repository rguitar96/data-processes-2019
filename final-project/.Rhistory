summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
airports[airports$faa]
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
filter(mean_speed == min(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == min(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == min(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
arrange(desc(mean_speed)) %>%
filter(mean_speed == max(mean_speed))
# Which month had the greatest average departure delay?
dep_delay_by_month
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
dplyr::summarize(Mean = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
dplyr::summarize(mean_delay = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_dest <- dep_delay_by_month %>%
arrange(desc(mean_delay))
head(group_dest)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
%>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed = max(mean_speed)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed = max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights <- nycflights13::flights
dep_delay_by_month <- flights %>%
group_by(month) %>%
dplyr::summarize(mean_delay = mean(arr_delay, na.rm=TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month
dep_delay_by_month %>%
filter(mean_delay == max(mean_delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
group_dest <- dep_delay_by_month %>%
arrange(desc(mean_delay))
head(group_dest)
# You can look up these airports in the `airports` data frame!
airports <- nycflights13::airports
group_dest %>%
left_join(airports, by = c("dest"="faa"))
# Which city was flown to with the highest average speed?
View(flights)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed > max(mean_speed)-1)
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = T))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = TRUE))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa"))
flights %>%
group_by(dest) %>%
summarize(mean_speed = mean(distance/air_time, na.rm=TRUE)) %>%
filter(mean_speed == max(mean_speed, na.rm = TRUE)) %>%
arrange(desc(mean_speed)) %>%
left_join(airports, by = c("dest"="faa")) %>%
select(name)
read.table(file = 'data/hlth_ehis_al1i.tsv', sep = '\t', header = TRUE)
ls
files()
list.files()
list.files()
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "", dec = ".")
head(diamonds)
colnames(diamonds) <- c("caratage", "purity", "clarity", "certificate", "price")
diamonds$purity <- factor(diamonds$purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$clarity <- factor(diamonds$clarity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
summary(diamonds)
library(ggplot2)
ggplot(data=diamonds, aes(price, caratage)) +
geom_point()
ggplot(data=diamonds, aes(log(price), caratage)) +
geom_point()
#Starting model
model.1.1<-lm(formula = price ~ caratage + purity + clarity + certificate, data = diamonds)
summary(model.1.1)
#Let's try to predict log(price)
model.1.2<-lm(formula = log(price) ~ caratage + purity + clarity + certificate, data = diamonds)
summary(model.1.2)
#model1.2 has a lower residual standard error and a higher R^2. We will predict log(price).
#By default, the category that R chooses to be the reference or baseline, is the first category that appears alphabetically or  numerically (if categories are coded using 0,1,2,...).
#Let's use the worst level of each categorical variable as the reference category and HRD for certification institution.
diamonds$purity <- relevel(diamonds$purity, ref = "I")
diamonds$clarity <- relevel(diamonds$clarity, ref = "VS2")
diamonds$certificate <- relevel(diamonds$certificate, ref = "HRD")
model.1.3<-lm(formula = log(price) ~ caratage + purity + clarity + certificate, data = diamonds)
summary(model.1.3)
#Same statistics as model1.2.
#Let's check the interactions.
model.1.4 <- lm(formula = log(price) ~ .^2, data = diamonds)
summary(model.1.4)
#The standard error decreases  and th R^2 increases. However, only some interactions are relevant. Let's keep only those.
model.1.5 <- lm(formula = log(price) ~ caratage + purity + clarity + certificate + caratage:purity + caratage:clarity + caratage:certificate, data = diamonds)
summary(model.1.5)
#model.1.5 shows slightly worse statistics than model.1.4 but is way simpler.
#Let's analyse this model deeper.
# Residuals vs Fitted Plot
residuals_vs_fitted_model.1.5<-plot(model.1.5, which=1, col=c("blue"))
#Normal Q-Q Plot
qq_plot_model.1.5<-plot(model.1.5, which=2, col=c("blue"))
#Scale-Location
residuals_vs_fitted_model.1.5<-plot(model.1.5, which=3, col=c("blue"))
#Residuals vs Leverage
residuals_vs_fitted_model.1.5<-plot(model.1.5, which=5, col=c("blue"))
#Are we getting better results than with the previous models? Let's repeat the residual analysis for all and compare the results!
library(ggpubr)
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=1, col=c("red"))
qq_plot_model.1.1<-plot(model.1.1, which=2, col=c("red"))
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=3, col=c("red"))
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=5, col=c("red"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=1, col=c("forestgreen"))
qq_plot_model.1.2<-plot(model.1.2, which=2, col=c("forestgreen"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=3, col=c("forestgreen"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=5, col=c("forestgreen"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=1, col=c("darkorchid"))
qq_plot_model.1.3<-plot(model.1.3, which=2, col=c("darkorchid"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=3, col=c("darkorchid"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=5, col=c("darkorchid"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=1, col=c("brown"))
qq_plot_model.1.4<-plot(model.1.4, which=2, col=c("brown"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=3, col=c("brown"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=5, col=c("brown"))
residuals_vs_fitted_all <- ggarrange(
residuals_vs_fitted_model.1.1,residuals_vs_fitted_model.1.2,residuals_vs_fitted_model.1.3,
residuals_vs_fitted_model.1.4,residuals_vs_fitted_model.1.5,nrow = 2,ncol = 3)
residuals_vs_fitted_all
qq_plot_all <- ggarrange(
qq_plot_model.1.1,qq_plot_model.1.2,qq_plot_model.1.3,
qq_plot_model.1.4,qq_plot_model.1.5,nrow = 2,ncol = 3)
qq_plot_all
#Are we getting better results than with the previous models? Let's repeat the residual analysis for all and compare the results!
library(ggpubr)
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=1, col=c("red"))
qq_plot_model.1.1<-plot(model.1.1, which=2, col=c("red"))
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=3, col=c("red"))
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=5, col=c("red"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=1, col=c("forestgreen"))
qq_plot_model.1.2<-plot(model.1.2, which=2, col=c("forestgreen"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=3, col=c("forestgreen"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=5, col=c("forestgreen"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=1, col=c("darkorchid"))
qq_plot_model.1.3<-plot(model.1.3, which=2, col=c("darkorchid"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=3, col=c("darkorchid"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=5, col=c("darkorchid"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=1, col=c("brown"))
qq_plot_model.1.4<-plot(model.1.4, which=2, col=c("brown"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=3, col=c("brown"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=5, col=c("brown"))
residuals_vs_fitted_all <- ggarrange(
residuals_vs_fitted_model.1.1,residuals_vs_fitted_model.1.2,residuals_vs_fitted_model.1.3,
residuals_vs_fitted_model.1.4,residuals_vs_fitted_model.1.5,nrow = 2,ncol = 3)
residuals_vs_fitted_all
qq_plot_all <- ggarrange(
qq_plot_model.1.1,qq_plot_model.1.2,qq_plot_model.1.3,
qq_plot_model.1.4,qq_plot_model.1.5,nrow = 2,ncol = 3)
qq_plot_all
jarque.bera.test
jarque
library(jarque)
#We add Caratage category to the latest model
model.1.5.1 <- lm(formula = log(price) ~ caratage*caratage_category + purity + clarity + certificate + caratage:purity + caratage:clarity + caratage:certificate , data = diamonds_new)
diamonds <- read.delim("HW-diamonds.txt", header = FALSE, sep = "", dec = ".")
head(diamonds)
colnames(diamonds) <- c("caratage", "purity", "clarity", "certificate", "price")
diamonds$purity <- factor(diamonds$purity, levels=c("D", "E", "F", "G", "H", "I"))
diamonds$clarity <- factor(diamonds$clarity, levels=c("VS2", "VS1", "VVS2", "VVS1", "IF"))
summary(diamonds)
library(dplyr)
library(ggplot2)
library(tseries)
library(lmtest)
library(car)
ggplot(data=diamonds, aes(price, caratage)) +
geom_point()
ggplot(data=diamonds, aes(log(price), caratage)) +
geom_point()
#Starting model
model.1.1<-lm(formula = price ~ caratage + purity + clarity + certificate, data = diamonds)
summary(model.1.1)
#Let's try to predict log(price)
model.1.2<-lm(formula = log(price) ~ caratage + purity + clarity + certificate, data = diamonds)
summary(model.1.2)
#model1.2 has a lower residual standard error and a higher R^2. We will predict log(price).
#By default, the category that R chooses to be the reference or baseline, is the first category that appears alphabetically or  numerically (if categories are coded using 0,1,2,...).
#Let's use the worst level of each categorical variable as the reference category and HRD for certification institution.
diamonds$purity <- relevel(diamonds$purity, ref = "I")
diamonds$clarity <- relevel(diamonds$clarity, ref = "VS2")
diamonds$certificate <- relevel(diamonds$certificate, ref = "HRD")
model.1.3<-lm(formula = log(price) ~ caratage + purity + clarity + certificate, data = diamonds)
summary(model.1.3)
#Same statistics as model1.2.
#Let's check the interactions.
model.1.4 <- lm(formula = log(price) ~ .^2, data = diamonds)
summary(model.1.4)
#The standard error decreases  and th R^2 increases. However, only some interactions are relevant. Let's keep only those.
model.1.5 <- lm(formula = log(price) ~ caratage + purity + clarity + certificate + caratage:purity + caratage:clarity + caratage:certificate, data = diamonds)
summary(model.1.5)
#model.1.5 shows slightly worse statistics than model.1.4 but is way simpler.
model.1.5 <- lm(formula = log(price) ~ caratage + purity + clarity + certificate + caratage:certificate, data = diamonds)
summary(model.1.5)
#model.1.5 shows slightly worse statistics than model.1.4 but is way simpler.
#Let's analyse this model deeper.
# Residuals vs Fitted Plot
residuals_vs_fitted_model.1.5<-plot(model.1.5, which=1, col=c("blue"))
#Normal Q-Q Plot
qq_plot_model.1.5<-plot(model.1.5, which=2, col=c("blue"))
#Scale-Location
residuals_vs_fitted_model.1.5<-plot(model.1.5, which=3, col=c("blue"))
#Residuals vs Leverage
residuals_vs_fitted_model.1.5<-plot(model.1.5, which=5, col=c("blue"))
#We use Jarque-Bera to test the residuals
jarque.bera.test(model.1.5$residuals)
#To test the independance, we do the Durbin-Watson test
dwtest(model.1.5)
#For constant variance we'd use Breusch-Pagan
bptest(model.1.5)
# We'll use outlierTest and residualPlot
outlierTest(model.1.5)
residualPlot(model.1.5)
#Are we getting better results than with the previous models? Let's repeat the residual analysis for all and compare the results!
library(ggpubr)
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=1, col=c("red"))
qq_plot_model.1.1<-plot(model.1.1, which=2, col=c("red"))
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=3, col=c("red"))
residuals_vs_fitted_model.1.1<-plot(model.1.1, which=5, col=c("red"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=1, col=c("forestgreen"))
qq_plot_model.1.2<-plot(model.1.2, which=2, col=c("forestgreen"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=3, col=c("forestgreen"))
residuals_vs_fitted_model.1.2<-plot(model.1.2, which=5, col=c("forestgreen"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=1, col=c("darkorchid"))
qq_plot_model.1.3<-plot(model.1.3, which=2, col=c("darkorchid"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=3, col=c("darkorchid"))
residuals_vs_fitted_model.1.3<-plot(model.1.3, which=5, col=c("darkorchid"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=1, col=c("brown"))
qq_plot_model.1.4<-plot(model.1.4, which=2, col=c("brown"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=3, col=c("brown"))
residuals_vs_fitted_model.1.4<-plot(model.1.4, which=5, col=c("brown"))
residuals_vs_fitted_all <- ggarrange(
residuals_vs_fitted_model.1.1,residuals_vs_fitted_model.1.2,residuals_vs_fitted_model.1.3,
residuals_vs_fitted_model.1.4,residuals_vs_fitted_model.1.5,nrow = 2,ncol = 3)
residuals_vs_fitted_all
qq_plot_all <- ggarrange(
qq_plot_model.1.1,qq_plot_model.1.2,qq_plot_model.1.3,
qq_plot_model.1.4,qq_plot_model.1.5,nrow = 2,ncol = 3)
qq_plot_all
diamonds_new <- mutate(
diamonds,
caratage_category = as.factor(
case_when(
caratage < 0.5 ~ 's',
caratage < 1 ~ 'm',
caratage >= 1 ~ 'l'
)
)
)
diamonds_new$caratage_category <- relevel(diamonds_new$caratage_category, ref = "s")
#We add Caratage category to the latest model
model.1.5.1 <- lm(formula = log(price) ~ caratage*caratage_category + purity + clarity + certificate + caratage:purity + caratage:clarity + caratage:certificate , data = diamonds_new)
summary(model.1.5.1)
#Let's analyse this model deeper.
# Residuals vs Fitted Plot
residuals_vs_fitted_model.1.5.1<-plot(model.1.5.1, which=1, col=c("blue"))
#Normal Q-Q Plot
qq_plot_model.1.5.1<-plot(model.1.5.1, which=2, col=c("blue"))
#Scale-Location
residuals_vs_fitted_model.1.5.1<-plot(model.1.5.1, which=3, col=c("blue"))
#Residuals vs Leverage
residuals_vs_fitted_model.1.5.1<-plot(model.1.5.1, which=5, col=c("blue"))
#We use Jarque-Bera to test the residuals
jarque.bera.test(model.1.5.1$residuals)
#To test the independance, we do the Durbin-Watson test
dwtest(model.1.5.1)
#For constant variance we'd use Breusch-Pagan
bptest(model.1.5.1)
# We'll use outlierTest and residualPlot
outlierTest(model.1.5.1)
residualPlot(model.1.5.1)
# To test if clarity or purity is better than the other
anova(model.1.5.1)
#We add Caratage category to the latest model
model.1.5.1 <- lm(formula = log(price) ~ caratage*caratage_category + purity + clarity + certificate + caratage:certificate , data = diamonds_new)
summary(model.1.5.1)
#Let's analyse this model deeper.
# Residuals vs Fitted Plot
residuals_vs_fitted_model.1.5.1<-plot(model.1.5.1, which=1, col=c("blue"))
#Normal Q-Q Plot
qq_plot_model.1.5.1<-plot(model.1.5.1, which=2, col=c("blue"))
#Scale-Location
residuals_vs_fitted_model.1.5.1<-plot(model.1.5.1, which=3, col=c("blue"))
#Residuals vs Leverage
residuals_vs_fitted_model.1.5.1<-plot(model.1.5.1, which=5, col=c("blue"))
#We use Jarque-Bera to test the residuals
jarque.bera.test(model.1.5.1$residuals)
#To test the independance, we do the Durbin-Watson test
dwtest(model.1.5.1)
#For constant variance we'd use Breusch-Pagan
bptest(model.1.5.1)
# We'll use outlierTest and residualPlot
outlierTest(model.1.5.1)
residualPlot(model.1.5.1)
# To test if clarity or purity is better than the other
anova(model.1.5.1)
diamonds_c2 <- mutate(
diamonds,
caratage2 = caratage^2
)
model.1.5.2 <- lm(formula = log(price) ~ caratage + caratage2 + purity + clarity + certificate + caratage:purity + caratage:clarity + caratage:certificate , data = diamonds_c2)
summary(model.1.5.2)
diamonds_c2 <- mutate(
diamonds,
caratage2 = caratage^2
)
model.1.5.2 <- lm(formula = log(price) ~ caratage + caratage2 + purity + clarity + certificate + caratage:purity + caratage:clarity + caratage:certificate , data = diamonds_c2)
summary(model.1.5.2)
#Let's analyse this model deeper.
# Residuals vs Fitted Plot
residuals_vs_fitted_model.1.5.2<-plot(model.1.5.2, which=1, col=c("blue"))
#Normal Q-Q Plot
qq_plot_model.1.5.2<-plot(model.1.5.2, which=2, col=c("blue"))
#Scale-Location
residuals_vs_fitted_model.1.5.2<-plot(model.1.5.2, which=3, col=c("blue"))
#Residuals vs Leverage
residuals_vs_fitted_model.1.5.2<-plot(model.1.5.2, which=5, col=c("blue"))
#We use Jarque-Bera to test the residuals
jarque.bera.test(model.1.5.2$residuals)
#To test the independance, we do the Durbin-Watson test
dwtest(model.1.5.2)
#For constant variance we'd use Breusch-Pagan
bptest(model.1.5.2)
# We'll use outlierTest and residualPlot
outlierTest(model.1.5.2)
residualPlot(model.1.5.2)
setwd("D:/Universidad/EIT/UPM/Primer semestre/Data Processes/data-processes-2019/final-project")
shape(usa_deaths_states)
usa_deaths_states = read.csv("data/death-causes-usa.csv", sep=";")
shape(usa_deaths_states)
summary(usa_deaths_states)
dim(usa_deaths_states)
head(usa_deaths_states)
usa_deaths_states = read.csv("data/death-causes-usa.csv", sep=";")
spain_deaths = read.csv("data/death-causes-spain-2017-modified.csv")
usa_deaths_states = read.csv("data/death-causes-usa.csv", sep=";")
spain_deaths = read.csv("data/death-causes-spain-2017-modified.csv", sep=";")
dim(spain_deaths)
head(spain_deaths)
dim(spain_deaths)
dim(usa_deaths_states)
head(usa_deaths_states)
dim(spain_deaths)
head(spain_deaths)
usa_deaths = usa_deaths_states %>% filter(State == "United States") %>% filter(Cause.Name != "All causes")
usa_deaths = usa_deaths_states %>% filter(State == "United States") %>% filter(Cause.Name != "All causes")
library(dplyr)
usa_deaths = usa_deaths_states %>% filter(State == "United States") %>% filter(Cause.Name != "All causes")
head(usa_deaths)
